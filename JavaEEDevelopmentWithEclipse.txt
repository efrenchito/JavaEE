@1Introducing JEE and Eclipse

  Installing Apache Tomcat 
    Go to: http://tomcat.apache.org/
	Download 32-bit/64-bit Windows Service Installer (pgp, md5, sha1)
	  Server Shutdown Port:    8005
	  HTTP/1.1 Connector Port: 8080
	  AJP/1.3 Connector Port:  8009
	  Windows Service Name:    Tomcat9
	  UserName: admin
	  Password: admin
	  Role:     manager-gui

	If you want to change the port, open server.xml under the conf folder and look for connector declaration like:

		<Connector port="8080" protocol="HTTP/1.1"
		connectionTimeout="20000"
		redirectPort="8443" />
		
	Open tomcat-users.xml under the conf folder in any text editor. 
	At the end of the file you will see commented example of how to add users. Add the following configuration before closure of the </tomcat-users> tag:

		<role rolename="manager-gui"/>
		<user username="admin" password="admin" roles="manager-gui"/>

	Here we are adding a user admin, with password also as admin, to a role called 'managergui'.
	This role has access to web pages for managing an application in Tomcat. This and other security roles are defined in web.xml of the manager application. 
	You can find it at webapps/manager/WEB-INF/web.xml. For more information for managing Tomcat server, see http://tomcat.apache.org/tomcat-8.0-doc/manager-howto.html.
	
	set CATALINA_HOME=C:\Program Files\Apache Software Foundation\Tomcat 9.0
	
	After making the preceding changes, open a web browser and browse to http://localhost:8080 
	(modify port number if you have changed the default port as described previously).

  Installing Glassfish
    Go to https://glassfish.java.net/
    Download glassfish-4.1.1.zip (Java EE 7 Full Platform)
	
		Microsoft Windows [Versión 6.1.7601]
		Copyright (c) 2009 Microsoft Corporation. Reservados todos los derechos.

		C:\>cd glassfish4.1.1/bin
		C:\glassfish4.1.1\bin>asadmin start-domain
		Waiting for domain1 to start ........................
		Successfully started the domain : domain1
		domain  Location: C:\glassfish4.1.1\glassfish\domains\domain1
		Log File: C:\glassfish4.1.1\glassfish\domains\domain1\logs\server.log
		Admin Port: 4848
		Command start-domain executed successfully.

		
  Installing Visual C++ (Redistributable Packages for Visual Studio 2013)
    Go to http://www.microsoft.com/en-in/download/details.aspx?id=40784

  Installing MySql
    Go to https://www.mysql.com/
	    > http://dev.mysql.com/downloads/windows/
	Download mysql-5.7.14-winx64.zip (Windows (x86, 64-bit), ZIP Archive)

	Select a 'Custom' Setup Type
	Product and Features:
	  MySQL Server 5.7.14 - X64
	  MySQL Workbench 6.3.7 - X64
	TCP/IP
	  Port Number: 3306
	User(s):
	  root/root
	  user1/user1_pass
		
		
	Having installed all the above products, you should be in a position to start developing
	JEE applications. We may need a few additional software, but we will see how to install
	and configure them at appropriate time.
		
@2 Creating a Simple JEE Web Application
  + Configuring Tomcat in Eclipse
    -> Window>Show View>Servers (Click the link to create a new server)
	   - Select the Server Type:     'Tomcat v9.0 Server'
	   - Server's host name:         'localhost'
	   - Server name: 		       'Tomcat v9.0 Server at localhost'
	   - Server runtime environment: 'Apache Tomcat v9.0'
	   Click on Finish
	   
  + Creating a Dinamyc Web Project
    File>New>Other 'Dynamic Web Project' Click Next
	  Project Name: LoginSampleWebApp
	  Click Finish
	     
	-> File>New> JSP page
	/WebContent/index.jsp ...Right Click>Open With>Web Page Editor

		<body>
		  <h2>Login:</h2>
		  <form method="post">
		    User Name: <input type="text" name="userName"><br>
		    Password: <input type="password" name="password"><br>
		    <button type="submit" name="submit">Submit</button>
		    <button type="reset">Reset</button>
		  </form>
		</body>

    Java code is written in JSP between <% and %>; such Java code blocks in JSP are called scriplets.
	You can also set page-level attributes in JSP. They are called page directives and are included between <%@ and %>.

		<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>		
	
	In JSP, you have access to a number of objects to help you process and generate a response:
	OBJECT      RESPONSE
	Request	    HTTPServletRequest (http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServletRequest.html)
				Use it to get request parameters and other request-related data.
	response    HtpServletResponse (http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServletResponse.html).
				Use it to send a response.
	Out		    JSPWriter (http://docs.oracle.com/javaee/7/api/javax/servlet/jsp/JspWriter.html).
				Use this to generate a text response.
	session     HTTPSession (http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpSession.html).
				Use this to get/put objects in a session.
	Application ServletContext (http://docs.oracle.com/javaee/7/api/javax/servlet/ServletContext.html). 
				Use this to get/put objects shared in the sample application.
				
	In this example, we are going to make use of the request and out objects.
	//WebContent/injex.jsp
		<%@ page language="java" contentType="text/html; charset=ISO-8859-1" pageEncoding="ISO-8859-1"%>
		<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
		<html> 
		<head>
		<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
		<title>Insert title here</title>
		</head>
		<%
			String errMsg = null;
			//first check whether the form was submitted
			if ("POST".equalsIgnoreCase(request.getMethod()) && request.getParameter("submit") != null)
			{
				out.println("getMethod: " + request.getMethod()+"<br/>");
				out.println("getParameter: " + request.getParameter("submit")+"<br/>");
				//form was submitted
				String userName = request.getParameter("userName");
				String password = request.getParameter("password");
				if ("admin".equalsIgnoreCase(userName) &&
				"admin".equalsIgnoreCase(password))
				{
					//valid user
					out.println("Welcome admin !");
					return;
				}
				else
				{
					//invalid user. Set error message
					errMsg = "Invalid user id or password. Please try again";
				}
			}
		%>
		<body>
		<h2>Login:</h2>
		<!-- Check error message. If it is set, then display it -->
		<%if (errMsg != null) { %>
		<span style="color: red;"><%out.print(errMsg); %></span>
		<%} %>
		<form method="post">
		User Name: <input type="text" name="userName"><br>
		Password: <input type="password" name="password"><br>
		<button type="submit" name="submit">Submit</button>
		<button type="reset">Reset</button>
		</form>
		</body>
		</html>
		
		@@@WARNING
		The superclass "javax.servlet.http.HttpServlet" was not found on the JavaBuildPath.
		-> Import server-api.jar within WEB-INF/lib -> All .jar files in this folder are added to the classpath of the web application
	
  + Using JavaBeans in JSP
    The code that we wrote in JSP above does not follow JSP best practices. In general, it is a bad idea to have scriplets (Java code) in JSP.
	In most large organizations, the UI designer and programmers are different roles performed by different people. Therefore, it is recommended that JSP 
	contains mostly markup tags so that it is easy for a designer to work on page design. The Java code should be in separate classes. It also makes sense
    from the reusability point of view to move the Java code out of JSP.
	
	You can delegate the processing of the business logic to JavaBeans from JSP. 
	JavaBeans are simple Java objects with attributes and getters and setters for these objects.
	JSP has a special tag for using JavaBeans – jsp:useBean:
    
		<jsp:useBean id="name_of_variable" class="name_of_bean_class" scope="scope_of_bean"/>
		
	
	Scope indicates the lifetime of this bean. Valid values are application, page, request, and session.
	SCOPE NAME   DESCRIPTION
	page         Bean can be used only in the current page.
	request      Bean can be used in any page in the processing of the same request. One JSP request can be handled by
				 multiple JSPs if one page forwards the request to another page.
	session      Bean can be used in the same HTTP session. The session is useful if your application wants to save the
				 user data per interaction with the application, for example, to save items in the shopping cart in an online
				 store application.
	application  Bean can be used in any page in the same web application. Typically, web applications are deployed in a
				 web application container as Web Application Archive (WAR) files. In the application scope, all JSPs
				 in a WAR file can use JavaBeans within this scope.
				 
	-> We will move the code to validate the user in our login example to a JavaBean class.
	First, we need to create the JavaBean class.
	File>New Class
	Class Name: LoginBean
	Package: packt.book.jee_eclipse.ch2.bean
	
		public class LoginBean {
			private String userName;
			private String password;
		}
	
	-> Right click and select the Source | Generate Getters and Setters
	-> We will add one more method to it, to validate the username and the password:
	//Java Resources/src/.../LoginBean.java
		package packt.book.jee_eclipse.ch2.bean;

		public class LoginBean {

			private String userName;
			private String password;
			public String getUserName() {
				return userName;
			}
			public void setUserName(String userName) {
				this.userName = userName;
			}
			public String getPassword() {
				return password;
			}
			public void setPassword(String password) {
				this.password = password;
			}
			public boolean isValidUser()
			{
				//Validation can happen here from a number of sources for example, database and LDAP
				//We are just going to hardcode a valid username and password here.
				return "admin".equals(this.userName) &&
				"admin".equals(this.password);
			}
		}

	We will now use this bean in our JSP and delegate the task of validating a user to this bean. 
	Open index.jsp. Replace the Java scriplet just above the <body> tag in the preceding code with the following:

		<%String errMsg = null; %>
		<%if ("POST".equalsIgnoreCase(request.getMethod()) && request.getParameter("submit") != null) {%>
			<jsp:useBean id="loginBean" class="packt.book.jee_eclipse.ch2.bean.LoginBean">
				<jsp:setProperty name="loginBean" property="*"/>
			</jsp:useBean>
			<%if (loginBean.isValidUser()){
				//valid user
				out.println("<h2>Welcome admin !</h2>");
				out.println("You are successfully logged in");
			}else{
				errMsg = "Invalid user id or password. Please try again";
			}%>
		<%} %>
	
	Note how 
		<jsp:setProperty name="loginBean" property="userName" value="<%request.getParameter(\"userName\")%>"/>
		<jsp:setProperty name="loginBean" property="password" value="<%request.getParameter(\"password\")%>"/>
	Although we have moved the validation of a user to LoginBean, we still have a lot of code in Java scriplets. 
	Ideally, we should have as few Java scriplets as possible in JSP. We still have the code for checking conditions and for variable assignments. 
	We can write the same code by using tags so that it is consistent with the remaining tag-based code in JSP and will be easier for a web designer 
	to work on it. This can be achieved using JSP Standard Tag Library (JSTL).

  + Using JSTL  
  JSTL tags can be used to replace much of the Java code written in scriplets. JSTL tags are classified in five broad groups:
	Core: Covers flow control and variable support among other things
	XML: Tags to process an XML document
	i18n: Tags to support internationalization
	SQL: Tags to access a database
	Functions: Tags to perform some of the common string operations
	
  See http://docs.oracle.com/javaee/5/tutorial/doc/bnake.html for more details on JSTL.
  
  -> We will modify the login JSP to use JSTL so that there are no Java scriplets in it.
     1. Download JSTL libraries from https://jstl.java.net/download.html (API/Implementation)
	    http://search.maven.org/remotecontent?filepath=javax/servlet/jsp/jstl/javax.servlet.jsp.jstl-api/1.2.1/javax.servlet.jsp.jstl-api-1.2.1.jar
	    http://search.maven.org/remotecontent?filepath=org/glassfish/web/javax.servlet.jsp.jstl/1.2.1/javax.servlet.jsp.jstl-1.2.1.jar
	 2. We need to add a declaration for JSTL in our JSP
	    <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
		
		@@@WARNING
		Can not find the library descriptor for "http://java.sun.com/jsp/jstl/core"
		Import server-api.jar within WEB-INF/lib -> All .jar files in this folder are added to the classpath of the web application

     3. Let's modify our JSP page to use JSTL so that there are no Java scriplets in it.

			<%@ page language="java" contentType="text/html; charset=ISO-8859-1" pageEncoding="ISO-8859-1"%>
			<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
			<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
			<html> 
			<head>
				<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
				<title>Insert title here</title>
			</head>
				<body>
					<c:set var="errMsg" value="${null}"/>
					<c:set var="displayForm" value="${true}"/>
					<c:if test="${\"POST\".equalsIgnoreCase(pageContext.request.method) && pageContext.request.getParameter(\"submit\") != null}">
						<jsp:useBean id="loginBean" class="packt.book.jee_eclipse.ch2.bean.LoginBean">
							<jsp:setProperty name="loginBean" property="*"/>
						</jsp:useBean>
						<c:choose>
							<c:when test="${!loginBean.isValidUser()}">
								<c:set var="errMsg" value="Invalid user id or password. Please try again"/>
							</c:when>
							<c:otherwise>
							<h2><c:out value="Welcome admin !"/></h2>
							<c:out value="You are successfully logged in"/>
							<c:set var="displayForm" value="${false}"/>
							</c:otherwise>
						</c:choose>
					</c:if>
				<c:if test="${displayForm}">
					<body>
						<h2>Login:</h2>
						<!-- Check error message. If it is set, then display it -->
						<c:if test="${errMsg != null}">
						<span style="color: red;">
						<c:out value="${errMsg}"></c:out>
						</span>
						</c:if>
						<form method="post">
						User Name: <input type="text" name="userName"><br>
						Password: <input type="password" name="password"><br>
						<button type="submit" name="submit">Submit</button>
						<button type="reset">Reset</button>
						</form>
					</body>
				</c:if>
			</html>
		
			@@@WARNING
			Multiple annotations found at this line: 
			  - javax.servlet.jsp.PageContext cannot be resolved to a type
			  - javax.servlet.jsp.JspException cannot be resolved to a type
			  - Unknown tag (c:if)
			->  Import jsp-api.jar within WEB-INF/lib -> All .jar files in this folder are added to the classpath of the web application
			
		As you can see, there are no Java scriplets in the previous code. All of them are replaced by tags. 
		f a web designer opens this code in any HTML editor, they will be able to edit the HTML code quite easily without any interfering Java code.
		**Instead of just displaying the welcome message on the same page. You could use the <jsp:forward> tag to achieve this.
		
  + Implementing login application using Java Servlet
    - Creating a Dinamyc Web Project
      File>New>Other 'Dynamic Web Project' Click Next
	  Project Name: LoginSampleWebApp
	  Click Finish
	     
		-> /JavaResources/src/ File>New> Servlet
		Package: packt.book.jee_eclipse.book.servlet
		Class Name: LoginServlet
		Then, click Finish.
	
	    @@@WARNING
		The import javax.servlet cannot be resolved
		@WebServlet cannot be resolved to a type
		->  Import servlet-api.jar within WEB-INF/lib -> All .jar files in this folder are added to the classpath of the web application
		
	The Servlet wizard creates the class for you. Notice the @WebServlet("/LoginServlet") annotation just above the class declaration. 
	Before JEE 5, you had to declare servlets in web.xml in the WEB-INF folder. You can still do that, but you can skip this declaration 
	if you use proper annotations. 
	Using WebServlet, we are telling the servlet container that LoginServlet is a servlet, and we are mapping it to the following URL path: /LoginServlet. 
	Thus, we are avoiding two entries in web.xml by using this annotation:
		<servlet>
		<servlet-mapping>
	
	-> We will now change the mapping from /LoginServlet to just /login.
		@WebServlet("/login")
		public class LoginServlet extends HttpServlet {...}

		The wizard also created the doGet and doPost functions. These functions are overridden from the following base class: HttpServlet.
		The doGet function is called to create a response for the Get request, and doPost is called to create a response for the Post request.
		//Java Resources/src/.../LoginServlet
			package packt.book.jee_eclipse.book.servlet;

			import javax.servlet.annotation.WebServlet;
			import javax.servlet.http.HttpServlet;
			import javax.servlet.http.HttpServletRequest;
			import javax.servlet.http.HttpServletResponse;
			import javax.servlet.ServletException;
			import java.io.IOException;


			/**
			 * Servlet implementation class LoginServlet
			 */
			@WebServlet("/login")
			public class LoginServlet extends HttpServlet {
				private static final long serialVersionUID = 1L;

				/**
				 * Default constructor. 
				 */
				public LoginServlet() {
					super();
				}

				/**
				 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
				 */
				protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
					response.setContentType("text/html");
					response.getWriter().write(createForm(null));
				}

				/**
				 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
				 */
				protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
					String userName = request.getParameter("userName");
					String password = request.getParameter("password");
					//create StringBuilder to hold response string
					StringBuilder responseStr = new StringBuilder();
					if ("admin".equals(userName) && "admin".equals(password)) {
						responseStr.append("<h2>Welcome admin !</h2>")
								   .append("You are successfully logged in");
					}
					else {
						//invalid user credentials
						responseStr.append(createForm("Invalid user id or password. Please try again"));
					}
					
					response.setContentType("text/html");
					response.getWriter().write(responseStr.toString());
				}

				protected String createForm(String errMsg) {
					StringBuilder sb = new StringBuilder("<h2>Login</h2>");
					//check whether error message is to be displayed
					if (errMsg != null) {
						sb.append("<span style='color: red;'>")
						  .append(errMsg)
						  .append("</span>");
					}
					//create form
					sb.append("<form method='post'>\n")
					  .append("User Name: <input type='text' name='userName'><br>\n")
					  .append("Password: <input type='password' name='password'><br>\n")
					  .append("<button type='submit' name='submit'>Submit</button>\n")
					  .append("<button type='reset'>Reset</button>\n")
					  .append("</form>");
					return sb.toString();
				}
			}
		
		Servlets are good to process requests that do not need to generate too much markup, for example, controllers in the Model-View-Controller (MVC) framework; 
		for processing requests that generate a non-text response; or for creating a web service or web-socket end points.

  + Creating WAR
  Thus far, we have been running our web application from Eclipse, which does all the work of deploying the application to the Tomcat server. 
  This works fine during development, but when you want to deploy it to the test or the production server, you need to create Web Application Archive(WAR).
    
	1. Go to the Servers view, select the application, and right-click and select the Remove option.
	2. Then, right-click on the project in Project Explorer and select Export | WAR file. Select the destination for the WAR file.
	3. To deploy the WAR file to Tomcat, copy it to the <tomcat_home>/webapps folder.
	4. Start the server if it is not already running. If Tomcat is already running, you don't need to restart it.
	-> Tomcat monitors the webapps folder, and any WAR file copied to it is automatically deployed. 
	You can verify this by opening the URL of your application in the browser, for example, http://localhost:8080/LoginServletApp/login.


  + Java Server Faces
  When working with JSP, we saw that it is not a good idea to mix scriplets with the HTML markup. We solved this problem by using JavaBean. 
  Java Server Faces takes this design further, and in addition to supporting JavaBeans, it provides built-in tags for HTML user controls, 
  which are context aware, can perform validation, and can preserve the state between requests. We will now create the login application using JSF.

	- Creating a Dinamyc Web Project
      File>New>Other 'Dynamic Web Project' Click Next
	  Project Name: LoginJSFApp
	  Click Finish
	     
		-> /JavaResources/src/ File>New> Servlet
		Package: packt.book.jee_eclipse.book.servlet
		Class Name: LoginServlet
		Then, click Finish.

	- Download JSF libraries from
	  https://maven.java.net/content/repositories/releases/org/glassfish/javax.faces/2.2.9/javax.faces-2.2.9.jar and copy to the WEB-INF/lib folder in your project.
	- JSF follows the MVC pattern. The advantage of MVC is that there is a clear separation of the UI and the business logic.
	  In JSP, the implementation of MVC is optional, but JSF enforces the MVC design.
	  Views in JSF are created as xhtml files. The controller is a servlet from the JSF library, and the models are Managed Beans (JavaBeans
	  
	-> We will first configure a controller for JSF. We will add the servlet configuration and mapping in web.xml.
		Add the following XML snippet
		//WebContent/WEB-INF/web.xml
		...
			<servlet>
				<servlet-name>JSFServlet</servlet-name>
				<servlet-class>javax.faces.webapp.FacesServlet</servlet-class>
				<load-on-startup>1</load-on-startup>
			</servlet>
			<servlet-mapping>
				<servlet-name>JSFServlet</servlet-name>
				<url-pattern>*.xhtml</url-pattern>
			</servlet-mapping> 
		</web-app>
	  
	-> Next, we will create Managed Bean for our login page.
	File>New Class
	Class Name: LoginBean
	Package: packt.book.jee_eclipse.ch2.bean
	//Java Resources/src/.../LoginBean.java
		package packt.book.jee_eclipse.bean;
		
		import javax.faces.bean.ManagedBean;
		import javax.faces.bean.RequestScoped;
		
		@ManagedBean(name="loginBean")
		@RequestScoped
		public class LoginBean {
		  private String userName;
			private String password;
			private String errorMsg;
			
			public String getUserName() {
			  return userName;
			}
			
			public void setUserName(String userName) {
			  this.userName = userName;
			}
			
			public String getPassword() {
			  return password;
			}
			
			public void setPassword(String password) {
			  this.password = password;
			}
			
			public String getErrorMsg() {
			  return errorMsg;
			}
			
			public void setErrorMsg(String errorMsg) {
			  this.errorMsg = errorMsg;
			}
			
			public String validate() {
			  if ("admin".equals(userName) && "admin".equals(password)) {
			    errorMsg = null;
			    return "welcome";
			  }else {
			    errorMsg = "Invalid user id or password. Please try again";
			    return null;
			  }
			}
		}
	
	->/WebContent/File>New File 'index.xhtml'
	    <html xmlns="http://www.w3.org/1999/xhtml"
              xmlns:f="http://java.sun.com/jsf/core"
              xmlns:h="http://java.sun.com/jsf/html">
		<head>
		<title>Login</title>
		</head>
		<body>
		  <h2>Login</h2>
		  <h:outputText value="#{loginBean.errorMsg}" rendered="#{loginBean.errorMsg != null}" style="color:red;"/>
		  <h:form>
			User Name: <h:inputText id="userName" value="#{loginBean.userName}"/><br/>
			Password: <h:inputSecret id="password" value="#{loginBean.password}"/><br/>
			<h:commandButton value="Submit" action="#{loginBean.validate}"/>
		  </h:form>
		</body>
		</html>
		
	->/WebContent/File>New File 'welcome.xhtml'
		<html xmlns="http://www.w3.org/1999/xhtml"
			  xmlns:f="http://java.sun.com/jsf/core"
			  xmlns:h="http://java.sun.com/jsf/html">
		<body>
		  <h2>Welcome admin !</h2>
		  You are successfully logged in
		</body>
		</html>
		
	JSF can do much more than what we have seen in this small example – it has the support to validate an input and create page templates too. 
	However, these topics are beyond the scope of this book. 
	Visit https://docs.oracle.com/cd/E13224_01/wlw/docs103/guide/webapplications/jsf/jsf-app-tutorial/Introduction.html for a tutorial on JSF.

  + Using Maven	for Project Management
  In the projects that we created thus far in this chapter, we have managed many of the project management tasks, such as downloading libraries on which our 
  project depends, adding them to the appropriate folder so that the web application can find it, and exporting the project to create the WAR file for deployment.
  It helps to have a tool do many of the project management tasks for us so that we can focus on application development.
  
  We will now see how to use Maven for project management.
  By following the convention for creating the project structure and allowing projects to define the hierarchy, Maven makes project management easier than Ant. 
  Ant is primarily a build tool, whereas Maven is a project management tool, which does build management too.
  See http://maven.apache.org/what-is-maven.html to understand what Maven can do. 
  
  In particular, Maven simplifies dependency management. You saw in the JSF project that we first downloaded the appropriate Jar files for JSF and copied them 
  to the lib folder. Maven can automate this. You can configure Maven settings in pom.xml. POM stands for Project Object Model.
  If you are curious to know what pom.xml is, then visit http://maven.apache.org/pom.html#What_is_the_POM.
  
  Before we use Maven, it is important to understand how it works Maven uses repositories. Repositories contain plugins for many well-known libraries/projects.
  A plugin includes the project configuration information, JAR files required to use this project in your own project, and any other supporting artifacts. 
  The default Maven repository is a collection of plugins. 
  You can find a list of plugins in the default Maven repository at http://maven.apache.org/plugins/index.html. 
  You can also browse the content of the Maven repository at http://search.maven.org/#browse. 

  Maven also maintains a local repository on your machine. 
  This local repository contains only those plugins that your projects have specified dependencies on. On Windows, you will find the local repository
  at C:\Users \<username>\.m2, and on Mac OS X, it is located at ~/.m2.
  You define plugins on which your project depends in the dependencies section of pom.xml (we will see the structure of pom.xml shortly when we create a Maven project). 
  For example, we can specify a dependency on JSF. When you run the Maven tool, it first inspects all dependencies in pom.xml. It then checks whether the dependent plugins with
  the required versions are already downloaded in the local repository. If not, it downloads them from the central (remote) repository. You can also specify repositories to look in. 
  If you do not specify any repository, then dependencies are searched in the central Maven repository.
  
  The Eclipse JEE version has Maven built-in, so you don’t need to download it. 
  However, if you plan to use Maven from outside Eclipse, then download it from http://maven.apache.org/download.cgi.
  
  + Maven Views and Preferences in Eclipse
  Windows>Show View> Other | Select Maven Repositories
  Windows>Preferences | Maven
	Click on the Maven node in Preferences, and set the following options
	  - Do not automatically update dependencies from remote repositories
	  - Download Artifact Sources
	  - Download Artifact JavaDoc
	  - Download repository index updates on startup
	  -> Click on Apply and then Ok
	  
  + Creating a Maven Project
  An archetype is a project template. When you use an archetype for your project, all the dependencies and other Maven project configurations defined 
  in the template (archetype) are imported into your project.
  See more information about Maven Archetype at http://maven.apache.org/guides/introduction/introduction-to-archetypes.html.
  
    File>New>Maven Project
    Accept all default options and click Next. 
	Type 'webapp' in the filter box and select maven-archetype-webapp
	  -> Click on Next
	  GroupId: packt.book.jee_eclipse
	  ArtifactId: maven_jsf_web_app	
	    -> Click on Finish.
		
  + Adding Maven dependencies 
  The archetype that we selected for the project does not include some of the dependencies required for a JEE web project. 
  Therefore, you might see an error marker in index.jsp. We will fix this by adding a dependency for the JEE libraries
  -> Within pom.xml file Dependencies tab
  Add
    GroupId: javax.servlet
	ArtifactId: javax.servlet-api
	Version: 3.1.0
	Scope: provided
	
	GroupId: com.sun.faces
	ArtifactId: jsf-api
	Version: 2.2.9
	
	GroupId: com.sun.faces
	ArtifactId: jsf-impl
	Version: 2.2.9
	
  + The Maven Project structure
    The Maven project wizard creates the src and target folders under the main project folder. As the name suggests, all source files go under src. 
    However, the Java package structure starts under the main folder. By convention, Maven expects Java source files under the java folder. 
    Therefore, create the java folder under src/main. The Java package structure starts from the java folder, that is, src/main/java/<java-packages>. 
    Web content such as HTML, JS, CSS, and JSP go into the webapp folder under src/main. 
    The compiled classes and other output files generated by the Maven build process are stored in the target folder.
	
	  See http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html html for more information on dependency scopes.
	
    The code for our login JSF page is the same as in the previous example of LoginJSFApp.
    Therefore, copy the packt folder from the src folder of that project to the src/main/java folder of this Maven project. 
    This adds LoginBean.java to the project. 
    Then, copy web.xml from the WEB-INF folder to the src/main/webapp/WEB-INF folder of this project.
    Copy index.xhtml and welcome.xhtml to the src/main/webapp folder.
	
  + Creating WAR using Maven
    In a previous example, we created a WAR file by using the Export option of Eclipse. 
	In a Maven project, you can create WAR by invoking the Maven Install plugin. Right-click on the project and select the Run As | Maven install option. 
	The WAR file is created in the target folder. You can then deploy the WAR file in Tomcat by copying it to the webapps folder of Tomcat.
	

@3 Source Control Management in Eclipse
Source Control Management (SCM) is an essential part of software development.
In this chapter, we will see how to use Eclipse plugins for Git and Subversion.  
  
  + The Eclipse Subversion plugin
  In this section, we will see how to install and use SVN Eclipse plugin. We will create a small project and see how to check-in a project to SVN from within Eclipse. 
  We will also see how to sync with the existing SVN repository. If you do not have access to a SVN repository, you can choose from some of the free SVN 
  offerings online. For the purpose of explaining SVN Eclipse plugin features, the author has used https://riouxsvn.com (myudem/123pormi)
    Repository Title: Java EE Development
	Repository Name: javaeedev
  
    + Installing the Eclipse Subversion plugin
    Open the Eclipse Marketplace by selecting the Help | Eclipse Marketplace menu
     - Search for 'subversion'
     -> Install 'Subversive - SVN Team Provider 4.0.0'
   
      Before we configure the SVN repository in Eclipse, we need to select/install a SVN Connector. 
      Go to Eclipse Preferences and type svn in the filter box. Then, go to the SVN Connector tab.
      Install SVN Kit 1.7.14 (click the Finish button)
  
      We will now configure an existing SVN repository in Eclipse.
      Select the Window | Perspective | Open Perspective | Other menu and then select the SVN Repository Exploring perspective.
  
    + Adding a project to an SVN repository
      To add a repository, right-click the SVN Repositories view and select New | Repository Location.
       
	  ¿?¿?¿?¿?
	   
  + The Eclipse Git plugin
  Select the Help | Eclipse Marketplace option and type 'egit' in the Find textbox.
  'EGit - Git Team Provider 4.0.1' -> If the plugin is already installed, it will be marked as Installed.
  
    Adding a project to Git
	Git is a distributed repository. Unlike other source management systems, Git maintains a complete local repository too. 
	So you can perform activities such as check-out and checkin in the local repository without connecting to any remote repository. 
	When you are ready to move your code to a remote repository, then you can connect to it and push your files to the remote repository.
	
	If you are new to Git, take a look at the following documentation and tutorial:
	https://git-scm.com/doc
	https://www.atlassian.com/git/tutorials/
	
	We will add this project to Git. Right-click on the project in Package Explorer or Navigator and select Team | Share Project.
	Select Git and click Next. Check the box Use or create repository in parent folder of project.
	Select the project (check the box for the project) and click the Create Repository button. Then click Finish.
	
	This creates a new Git repository in the project folder. 
	Switch to the Git perspective (or open Git Repositories view from the Window | Show View | Other option):
	Before you commit the files to Git, you need to move Unstaged Changes to Staged Changes. We are going to add all the files to Git. 
	So select all the files in the Unstaged view and drag and drop them in the Staged Changes view.
   
  
  