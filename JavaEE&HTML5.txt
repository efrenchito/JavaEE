https://www.mhprofessional.com/oraclepressbooks/downloads_list
@CHAPTER1: Introduction to Java EE and HTML5 Enterprise
    Development Tools
     Three main development tools are used throughout this book: NetBeans IDE, Java EE 7, and HTML5.
      NetBeans
        NetBeans IDE is the development tool you will use throughout this book. It provides features such as editors, templates, and code generators that make it a perfect fit for creating applications that use Java EE 7 and HTML5.
      Java EE 7      
        Java Platform, Enterprise Edition (Java EE) provides a standardsbased platform for developing web and enterprise 
        applications. The platform consists of multiple components that enable developers to build these applications.
        In addition, the Java EE 7 platform provides several other components:
         ■ Batch Applications for the Java Platform
         ■ Java Message Service (JMS)
         ■ Contexts and Dependency Injection (CDI)
         ■ Concurrency Utilities
         ■ JavaServer Faces (JSF)
         ■ Java Servlet Technology
      HTML5
        While most people believe HTML5 is relatively new, it has actually been in development since 2004. The World Wide
        Web Consortium (W3C) designed the original specification to address what it observed as common uses of HTML and
        XHTML across the Internet at the time.

        Thankfully, several websites have been created to help developers navigate this
        tricky area of developing HTML applications. Two of the more popular sites are
        ■ HTML5 Test http://html5test.com/
        ■ Can I Use http://caniuse.com/

@Chapter2: PERSISTENCE
    Overview
      There are many ways to persist data in Java. 
      Java Platform, Standard Edition (Java SE) provides APIs to manipulate streams and files.
      The Java Database Connectivity (JDBC) API can be used to store data to a relational database.
      Different NoSQL data stores provide APIs to manage data specific to those data stores.
    
      The Java EE platform provides the Java Persistence API (JPA) for the management of persistence and object/relational mapping.
       -> In other words, a POJO (Plain Old Java Object) can be used to represent a table in the relational database, 
  	      and each class instance corresponds to a row in that table.
    
      Data stored in a relational database should maintain ACID (atomicity, consistency, isolation, durability) properties.
      To help ensure that ACID properties are maintained any CRUD operation should be done within a transactional boundary.
      The transactions can be container-managed or user-managed.
      .Container-Managed transactions: 
       (Automatically started by the container and then either committed/rolled back by the container.)
        -> Enterprise JavaBeans (EJB) container 
	    -> @javax.transaction.Transactional annotation provided by the Java Transaction API (JTA).
      .User-Managed transactions: (Explicitly started and completed by the user.)

    JPA Entity
      JPA defines an entity as a lightweight persistent domain object
      Any POJO with a no-args public constructor can be defined as an entity.

      	Annotations<@Entity|@Table|@Id|@NotNull|@Size(min=1, max=20)>
      	  @javax.persistence.Entity
      	  @javax.persistence.Table
      	  @javax.persistence.Column
      	  @javax.persistence.Id 
      	    -> any Java primitive/wrapper|java.lang.String|java.util.Date|java.sql.Date|java.math.BigDecimal|java.math.BigInteger
      	  @javax.validation.constraints.NotNull
      	  @javax.validation.constraints.Size
      	  @javax.persistence.OneToOne
      	  @javax.persistence.OneToMany
		  @javax.persistence.ManyToOne
		  @javax.persistence.ManyToMany
		  @javax.persistence.JoinTable
		  @javax.persistence.CollectionTable


    Packaging an Entity
    Managing an Entity
