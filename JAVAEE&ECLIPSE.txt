Java EE Development with Eclipse (2nd Edition)
@1.Introducing JEE & Eclipse
  Java Enterprise Edition (JEE)
   JEE is a collection of many different specifications intended to perform specific tasks.
   JEE specifications can be broadly classified in the following groups:
    PRESENTATION LAYER: 
     JEE specifications or technologies in this group receive the request from web server and send back the response HTML/JSON/XML.
     -> Servlets, JSP, JSF
    BUSINESS LAYER: 
     Handle the business logic of your application generally the request to this layer comes from 
     the Presentation Layer/Middle Layer (Web Services). 
     Classes in this layer are executed in application containers (GlassFish/WebSphere/Tomcat)
      ENTERPRISE JAVA BEANS: Are Java classes where you can write your business logic.
       EJB are not strict required but they provide many of the services that are essential 
       (security/transaction mgmt, component lookup, object pooling)
        -> Session Beans:
        -> Message Driven Beans: Java Messaging Service (JSM)
    ENTERPRISE INTEGRATION LAYER
      APIS in this layer are used for interacting with external (to JEE application) systems in Enterprise.
      Java Database Connectivity (JDBC)
      The Java Persistence API (JPA)
      Java Connector Architecture
      Web Services  SOAP/REST 
  Eclipse IDE
   (source control syste/build tools/file explorer/managing servers/database explorer/memory|cpu profiler)
   Along with editor support, Eclipse has plugins to interact with many of the external
   systems used during development. For example, source control systems such as SVN and
   Git, build tools such as Apache Ant and Maven, file explorer for remote systems using
   FTP, managing servers such as Tomcat and GlassFish, database explorer, memory and
   CPU profiler, and so on.  
   -> Workspace/Plugins/Editors and Views/Perspectives/Eclipse Preferences  
  Tomcat -> Don't Support EJB
   Tomcat is a Web Container. It supports APIs in the presentation layer, it also supports JDBC and JPA also. 
   ...
  GlassFish
   GlassFish comes in two flavors: Web Profile and Full Platform. 
   Web Profile is like Tomcat, which does not include EJB support. So download Full Platform
   %GLASSFISH_HOME%: 'C:\Program Files\glassfish-4.1.1\'
    -> Define ports: glassfish/domains/domain1/config/domain.xml
    -> Start server: glassfish/bin/glassfish/bin/startserv.bat
       index.html -> glassfish/domains/domain1/docroot/index.html
       => Go to Administration Console
  MySql
    Installing MySQL for Windows
      1.Accept License Agreement
      2.Select the Custom option and click on Next.
        Select... 
          MySQL Server 
          MySQL Workbench 
        ...and complete the installation.
      3.MySQL Server Configuration
          Config Type: Development Machine
          Connectivity: 
            TCP/IP  
            Port Number: 3306 
            [CHECK] Open Firewall por for network access
          Account and Roles: 
            MySQL Root Password: root
            Custom User: admin/admin
         -> Make sure you select All Hosts when adding a user so that you are able to access
            MySQL database from any remote machine that has network access to the machine
            where MySQL is installed.
    Creating MySQL users
     You can create MySQL user either the Command Prompt or by using MySQL Workbench.
      Command Prompt:
        mysql -u root -p 
        Entered password: <root_password>
        mysql>
        mysql>user mysql;
          Database changed
        mysql>insert into user (host, user, password, select_priv, insert_priv, update_priv)
                          values ('%', 'user1', password('usper1_pass'),'Y','Y','Y');
      MySQL Workbench
        connect to the local MySQL server
        click on Management> Users & Privileges

@2.Creating a Simple JEE Web Application
  Configuring Tomcat in Eclipse
    Double-click the server in the Servers view to open it in the editor. (Windows>Show View>Servers)
    1.Add Tomcat v9.0 at Localhost Server (righ-click>New>Server)
    2.Define Server location in order to enable localhost execution within Eclipse
      opt1: Double-click Tomcat server node under Server tab to display Tomcat Server Overview
            Under Server locations region, select 'Use Tomcat installation (takes control of Tomcat installation)'
      opt2: right-click Tomcat server node -> Properties
            General>Location: /Servers/Tomcat v9.0 Server at localhost.server
  Creating a Dynamic Web Project
    We will start with a project to create a simple JSP.
    We will create a login JSP that submits data to it and validates the user.
      1.Create Dynamic Web Project
       File> New> Other 'Dynamic Web Project'
       Project Name: LoginSampleWebApp
       Target Runtime: Apache Tomcat v9.0
       Dynamic web module version: 3.1
      2.Create JSP File
       Right-click on the WebContent folder, New> JSP File
       Parent Folder: LoginSampleWebApp/WebContent
       File Name: Login.jsp
       If the file is not opened in the split editor:
       -> Right-click on index.jsp in the Project Explorer and select Open With | Web Page Editor.
          //Login.jsp
           <%@ page language="java" contentType="text/html; charset=ISO-8859-1" pageEncoding="ISO-8859-1"%>
            <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
            <html>
            <head>
            <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
            <title>Login</title>
            </head>
            <body>
            <%
            String errMsg = null;
            //first check whether the form was submitted
            if ("POST".equalsIgnoreCase(request.getMethod()) && request.getParameter("submit") != null){
                //form was submitted
              String userName = request.getParameter("userName");
              String password = request.getParameter("password");
              if ("admin".equalsIgnoreCase(userName) && "admin".equalsIgnoreCase(password)){
                //valid user
                System.out.println("Welcome admin !");
              }else{
                //invalid user. Set error message
                errMsg = "Invalid user id or password. Please try again";
              }
            }
            %>
            <h2>Login:</h2>
            <!-- Check error message. If it is set, then display it -->
            <%if (errMsg != null) { %>
              <span style="color: red;"><%= errMsg %></span>
            <%} %>
              <form method="post">
                User Name:<input type="text" name="userName"/><br/>
                Password:<input type="password" name="password"/></br>
                <button type="submit" name="submit">Submit</button>
                <button type="reset">Reset</button>
                 
              </form>
            </body>
            </html>
      3.Add Server Libraries
       To solve 'The superclass "javax.servlet.http.HttpServlet" was not found on the Java Build Path'
       Right-click on Project 'LoginSampleWebApp'>Properties>Java Build Path>Libraries
        Add Server Runtime/Apache Tomcat v9.0
  Running JSP in Tomcat
    To run this page in a web browser, you will need to deploy the application in a Servlet container.
    Make sure that Tomcat is running by checking its status in the Servers view of Eclipse.
    There are two ways to add a project to a configured server so that the application can be run on this server:
      1.Right-click on the server in the Servers view and select the Add and Remove option.
      2.Right-click on the project in the Project Explorer and select Properties. 
        Click on Server in the list, and select the server on which you want to deploy this project. Click OK or Apply.
    In the first method the project is immediately deployed on the server.
    In the second method, it will be deployed only when you run the project on the server.

    To run the application, right-click on the project in Project Explorer and select Run As | Run on Server.
    According to the Deployment Descriptor the welcome file should be displayed, so ensure your Login.jsp file 
    is in the welcome list.
  Using JavaBeans in JSP
    The code that we wrote in JSP above does not follow JSP best practices.
    You can delegate the processing of the business logic to JavaBeans from JSP. 
    JavaBeans are simple Java objects with attributes and getters and setters for these objects.

    JSP has a special tag for using JavaBeans â€“ jsp:useBean:
     -> <jsp:useBean id="name_of_variable" class="name_of_bean_class" scope="scope_of_bean"/>
    We used the <jsp:setProperty> tag to set the attributes of the bean:
        IMPLICITLY
          When Bean members are named as the fields in the form.
          -> <jsp:setProperty name="loginBean" property="*"/> 
        EXPLICITLY
          When member names of JavaBean do not match the request parameters.
          -> <jsp:setProperty name="loginBean" property="userName" value="<%=request.getParameter(\"userName\")%>"/>
          -> <jsp:setProperty name="loginBean" property="password" value="<%=request.getParameter(\"password\")%>"/>   

     File> New> Class
      Source Folder: LoginSampleWebApp/src
      Package: package org.javaskills.beans
      Class Name: LoginBean
        //Login.jsp
          <%@ page language="java" contentType="text/html; charset=ISO-8859-1" pageEncoding="ISO-8859-1"%>
          <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
          <html>
          <head>
          <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
          <title>Login</title>
          </head>
          <body>
          <%String errMsg = null; %>
          <%if ("POST".equalsIgnoreCase(request.getMethod()) && request.getParameter("submit") != null) {%>
              <jsp:useBean id="loginBean" class="org.javaskills.beans.LoginBean">
              <jsp:setProperty name="loginBean" property="*"/>
            </jsp:useBean>
          <%
            if (loginBean.isValidUser()) {
              //valid user
              out.println("<h2>Welcome admin !</h2>");
              out.println("You are successfully logged in <br/><br/>");
            }else{
              errMsg = "Invalid user id or password. Please try again";
            }
          %>
          <%} %>
          <!-- Check error message. If it's set then display it. -->
          <% if(errMsg != null) { %>
          <span style="color:red"><%= errMsg %></span>
          <% } %> 
            <form method="post">
              User Name:<input type="text" name="userName"/><br/>
              Password:<input type="password" name="password"/><br/>
              <button type="submit" name="submit">Submit</button>
              <button type="reset">Reset</button>
               
            </form>
          </body>
          </html>
        //LoginBean.java
          package org.javaskills.beans;

          public class LoginBean {
            private String userName;
            private String password;
            public String getUserName() {
              return userName;
            }
            public void setUserName(String userName) {
              this.userName = userName;
            }
            public String getPassword() {
              return password;
            }
            public void setPassword(String password) {
              this.password = password;
            }
            
            public boolean isValidUser()
            {
                return "admin".equals(this.userName) && "admin".equals(this.password);
            }

          }
  Using JSTL
    JSTL tags can be used to replace much of the Java code written in scriplets. JSTL tags are classified in five broad groups:
      Core: Covers flow control and variable support among other things
      XML: Tags to process an XML document
      i18n: Tags to support internationalization
      SQL: Tags to access a database
      Functions: Tags to perform some of the common string operations
    -> We will modify the login JSP to use JSTL so that there are no Java scriplets in it.
      1. Download JSTL libraries (API/Implementation), and make sure that these files are copied to WEB-INF/lib. 
        *** All .jar files in this folder are added to the classpath of the web application.
        -> http://search.maven.org/remotecontent?filepath=javax/servlet/jsp/jstl/javax.servlet.jsp.jstl-api/1.2.1/javax.servlet.jsp.jstl-api-1.2.1.jar
        -> http://search.maven.org/remotecontent?filepath=org/glassfish/web/javax.servlet.jsp.jstl/1.2.1/javax.servlet.jsp.jstl-1.2.1.jar
        => Right-click [Project]>WebContent>WEB-INF>lib
            Import>General>File System Browse for jstl-api.1.2.2.jar & jstl-1.2.1.jar
      2. Add a declaration for JSTL in our JSP.
        <%@ taglib prefix="c" uri="http://java.sun.com/jstl/core" %>

        SegÃºn el TLD o la directiva attribute del archivo tag, el atributo value no acepta expresiones] con causa raÃ­z

3.Source Control Management in Eclipse
4.Creating a JEE Database Application
5.Unit Testing
6.Debugging a JEE Application
7.Creating JEE Applications with EJB
8.Creating Web Application with Spring MVC
9.Creating Web Services
10.Asynchronous Programming with JMS
11.Java CPU Profiling and Memory Tracking